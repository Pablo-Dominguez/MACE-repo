?knit
?rmarkdown::render
setwd("~/Documents/MUM/MACE/2ndo Bloque/Entrega/source")
df <- readxl::read_excel("../dbs/Pumpkin_Seeds_Dataset/Pumpkin_Seeds_Dataset.xlsx")
col_numeric <- which( sapply(df, is.numeric ) )
quantile_df <- sapply(col_numeric, function( y ) {
quantile( x = unlist( df[,  y ] ), c(.25,.5,.75))
library(readxl)
library(dplyr)
library(knitr)
library(ggplot2)
library(ggpubr)
library(pastecs)
col_numeric <- which( sapply(df, is.numeric ) )   # Seleccionamos solamente las columnas numéricas.
quantile_df <- sapply(col_numeric, function( y ) {
quantile( x = unlist( df[,  y ] ), c(.25,.5,.75))
}) %>% as.data.frame()
quantile_df %>% View()
)
library(readxl)
library(dplyr)
library(knitr)
library(ggplot2)
library(ggpubr)
library(pastecs)
col_numeric <- which( sapply(df, is.numeric ) )   # Seleccionamos solamente las columnas numéricas.
quantile_df <- sapply(col_numeric, function( y ) {
quantile( x = unlist( df[,  y ] ), c(.25,.5,.75))
}) %>% as.data.frame()
quantile_df %>% View()
desc_df1 <- stat.desc(df[,1:floor(ncol(df)/2)]) %>% slice(., 4:ncol(df)) %>% bind_rows(.,quantile_df[,1:floor(ncol(df)/2)])
desc_df1 %>% View()
View(quantile_df)
View(quantile_df)
View(desc_df1)
View(desc_df1)
View(df)
View(df)
df$Class %>% table()
df$Class %>% table()[[1]]
df$Class %>% table() %>% colnames()
df$Class %>% table()[]
t <- df$Class %>% table()
t
t[1]
t[1][1]
t[1][[1]]
t[1] %>% names()
df$Class %>% table() %>% names()
df$Class %>% table() %>% names()[1]
df$Class %>% table() %>% names() %>% as.vector()
t <- df$Class %>% table() %>% names()
t[1]
df[df$Class==t[1]]
df %>% filter(.,Class = t[1])
df %>% filter(.,Class == t[1])
df %>% filter(.,Class == t[1]) %>% View()
t
col_numeric <- which( sapply(df, is.numeric ) )
col_numeric
cat.vec <- df$Class %>% table() %>% names()
df_class01 <- df %>% filter(.,Class == cat.vec[1]) # Çerçevelik
df_class02 <- df %>% filter(.,Class == cat.vec[2]) # Ürgüp Sivrisi
col_numeric <- which( sapply(df, is.numeric ) ) # Creamos un selector de las columnas numéricas
quantile_df <- sapply(col_numeric, function( y ) {
quantile( x = unlist( df_class01[,  y ] ), c(.25,.5,.75))
}) %>% as.data.frame()
rownames(quantile_df) <- c("Q1","Q2","Q3")
quantile_df01 <- sapply(col_numeric, function( y ) {
quantile( x = unlist( df_class01[,  y ] ), c(.25,.5,.75))
}) %>% as.data.frame()
View(quantile_df01)
df_class01 %>% ncol()
df_class01 %>% nrow()
quantile_df <- sapply(col_numeric, function( y ) {
quantile( x = unlist( df[,  y ] ), c(.25,.5,.75))
}) %>% as.data.frame()
cat.vec <- df$Class %>% table() %>% names()
df_class01 <- df %>% filter(.,Class == cat.vec[1]) # Çerçevelik
df_class02 <- df %>% filter(.,Class == cat.vec[2])
col_numeric <- which( sapply(df, is.numeric ) ) # Creamos un selector de las columnas numéricas
quantile_df01 <- sapply(col_numeric, function( y ) {
quantile( x = unlist( df_class01[,  y ] ), c(.25,.5,.75))
}) %>% as.data.frame()
rownames(quantile_df01) <- c("Q1","Q2","Q3")
desc_df01 <- stat.desc(df_class01[,1:floor(ncol(df_class01)/2)]) %>% slice(., 4:ncol(df_class01)) %>% bind_rows(.,quantile_df01[,1:floor(ncol(df_class01)/2)])
Q1 <- quantile_df01['Q1',] %>% as.vector() %>% as.numeric()
Q3 <- quantile_df01['Q3',] %>% as.vector() %>% as.numeric()
top_IQR <- Q3+1.5*(Q3-Q1)
bot_IQR <- Q1-1.5*(Q3-Q1)
count_top_out <- (df_class01>=top_IQR) %>% as.data.frame() %>% summarise(across(everything(), sum)) %>% as.vector() %>% as.numeric()
count_bot_out <- (df_class01<=bot_IQR) %>% as.data.frame() %>% summarise(across(everything(), sum)) %>% as.vector() %>% as.numeric()
perc_out <- (count_top_out+count_bot_out)/(df_class01 %>% nrow())
perc_out
q3
Q3
(df_class01>=top_IQR) %>% as.data.frame() %>% summarise(across(everything(), sum)) %>% as.vector() %>% as.numeric()
top_Q3 <- (df_class01>=top_IQR) %>% as.data.frame() %>% summarise(across(everything(), sum)) %>% as.vector() %>% as.numeric()
Q3
(df_class01>=Q3) %>% as.data.frame() %>% summarise(across(everything(), sum)) %>% as.vector() %>% as.numeric()
((df_class01>=Q3) %>% as.data.frame() %>% summarise(across(everything(), sum)) %>% as.vector() %>% as.numeric()) / (df_class01 %>% nrow())
cat.vec <- df$Class %>% table() %>% names()
df_class01 <- df %>% filter(.,Class == cat.vec[1]) # Çerçevelik
df_class02 <- df %>% filter(.,Class == cat.vec[2]) # Ürgüp Sivrisi
# Calculamos los cuantiles para la clase 1
col_numeric <- which( sapply(df_class01, is.numeric ) ) # Creamos un selector de las columnas numéricas
quantile_df01 <- sapply(col_numeric, function( y ) {
quantile( x = unlist( df_class01[,  y ] ), c(.25,.5,.75))
}) %>% as.data.frame()
rownames(quantile_df01) <- c("Q1","Q2","Q3")
desc_df01 <- stat.desc(df_class01[,1:floor(ncol(df_class01)/2)]) %>% slice(., 4:ncol(df_class01)) %>% bind_rows(.,quantile_df01[,1:floor(ncol(df_class01)/2)])
View(quantile_df01)
top_IQR
options(scipen=999)
top_IQR
Q3
Q1
1.5*(Q3-Q1)
(df_class01>=top_IQR) %>% as.data.frame()
df_class01["Area"]>=111027.750000
df_class01["Area"]>=111027.750000 %>% sum()
df_class01["Area"]>=111027.750000 %>% as.data.frame() %>% summarise(across(everything(), sum)) %>% as.vector() %>% as.numeric()
df_class01["Area"]>=111027.750000 %>% summarise(across(everything(), sum)) %>% as.vector() %>% as.numeric()
df_class01["Area"]>=111027.750000 %>% %>% as.vector()
df_class01["Area"]>=111027.750000 %>% as.vector()
df_class01["Area"]>=111027.750000
df_class01["Area"]>=111027.750000 %>% as.vector() %>% sum()
df_class01["Area"]>=111027.750000
df_class01["Area"]>=111027.750000 %>% View()
df_class01["Area"]>=111027.750000 %>% as.vector()
df_class01["Area"]>=111027.750000 %>% as.vector() %>% as.numeric()
df_class01["Area"]>=111027.750000 %>% as.vector() %>% as.numeric() %>% sum()
t <- df_class01["Area"]>=111027.750000 %>% as.vector()
sum(t)
Q1 <- quantile_df01['Q1',] %>% as.vector() %>% as.numeric()
Q3 <- quantile_df01['Q3',] %>% as.vector() %>% as.numeric()
top_IQR <- Q3+1.5*(Q3-Q1) #111027.750000
bot_IQR <- Q1-1.5*(Q3-Q1)
k <- 1
perc_out <- c()
for(col in colnames(df_class01)){
count_top_out <- df_class01[col]>=top_IQR[k] %>% as.vector()
count_bot_out <- df_class01[col]<=bot_IQR[k] %>% as.vector()
perc_out <- c(perc_out,(sum(count_top_out)+sum(count_bot_out))/(df_class01 %>% nrow()))
k <- k+1
}
perc_out
perc_out %>% tail()
perc_out %>% head(.,-1)
t <- count_top_out <- df_class01["Area"]>=Q3[1] %>% as.vector()
sum(t)
sum(t)/(df_class01 %>% nrow())
top_IQR
count_top_out <- (df_class01>=top_IQR)  %>% as.data.frame()
count_top_out["Area"] %>% as.vector()
t <- count_top_out["Area"] %>% as.vector()
sum(t)
t
t <- count_top_out["Area"]
t
t %>% as.vector()
t2 <- t %>% as.vector()
sum(t2)
t <- count_top_out["Area"][[1]]
t
sum(t)
count_top_out <- (df_class01>=top_IQR)  %>% as.data.frame()
View(count_top_out)
top_IQR
View(df_class01)
?filter_at
?filter_at
perc_out
data.frame(perc_out,row.names = c("perc.out"))
data.frame(perc_out) %>% View()
data.frame(t(perc_out)) %>% View()
head(perc_out,-1))
head(perc_out,-1))
head(perc_out,-1)
perc_out
perc_out_class01 <- data.frame(t(head(perc_out,-1)))
rownames(perc_out_class01) <- c("perc.out")
perc_out_class01 %>% View()
desc_df01 <- stat.desc(df_class01[,1:floor(ncol(df_class01)/2)]) %>% slice(., 4:ncol(df_class01)) %>% bind_rows(.,quantile_df01[,1:floor(ncol(df_class01)/2)])
desc_df01 %>% View()
View(perc_out_class01)
colnames(perc_out_class01) <- colnames(desc_df01)
desc_df01 <- stat.desc(df_class01) %>% slice(., 4:ncol(df_class01)) %>% bind_rows(.,perc_out_class01)
desc_df01 %>% View()
desc_df01 <- stat.desc(df_class01) %>% slice(., 4:ncol(df_class01))
View(desc_df01)
perc_out_class01 <- data.frame(t(head(perc_out,-1)))
colnames(perc_out_class01) <- colnames(desc_df01)
colnames(perc_out_class01) <- head(colnames(desc_df01),_
)
colnames(perc_out_class01) <- head(colnames(desc_df01),-1)
df_class01[,-1]
df_class01[,-1] %>% View()
desc_df01 <- stat.desc(df_class01[,-1]) %>% slice(., 4:ncol(df_class01[,-1]))
ncol(df_class01[,-1])
View(desc_df01)
ncol(desc_df01)
ncol(desc_df01) %>% View()
desc_df01 %>% View()
df_class01[,-1] %>% View()
df_class01[,:-1] %>% View()
desc_df01 <- stat.desc(-which(names(df_class01) == "Class")) %>% slice(., 4:ncol(-which(names(df_class01) == "Class")))
desc_df01 <- stat.desc(df_class01[,-which(names(df_class01) == "Class")]) %>% slice(., 4:ncol(df_class01[,-which(names(df_class01) == "Class")]))
desc_df01 %>% View()
desc_df01 %>%  bind_rows(.,perc_out_class01) %>% View()
desc_df01 <- desc_df01 %>%  bind_rows(.,perc_out_class01)
desc_df01 %>% View()
library(readxl)
library(dplyr)
library(knitr)
library(ggplot2)
library(ggpubr)
library(pastecs)
df <- readxl::read_excel("../dbs/Pumpkin_Seeds_Dataset/Pumpkin_Seeds_Dataset.xlsx")
# Poner nombre primeras columnas (footnote)
# Definimos un df para cada categoría
cat.vec <- df$Class %>% table() %>% names()
df_class01 <- df %>% filter(.,Class == cat.vec[1]) # Çerçevelik
df_class02 <- df %>% filter(.,Class == cat.vec[2]) # Ürgüp Sivrisi
# Calculamos los cuantiles para cada clase
## Clase 1
col_numeric <- which( sapply(df_class01, is.numeric ) ) # Creamos un selector de las columnas numéricas
quantile_df01 <- sapply(col_numeric, function( y ) {
quantile( x = unlist( df_class01[,  y ] ), c(.25,.5,.75))
}) %>% as.data.frame()
rownames(quantile_df01) <- c("Q1","Q2","Q3")
# Calculamos el % de outliers para cada clase
## Clase 1
Q1 <- quantile_df01['Q1',] %>% as.vector() %>% as.numeric()
Q3 <- quantile_df01['Q3',] %>% as.vector() %>% as.numeric()
top_IQR <- Q3+1.5*(Q3-Q1) #111027.750000
bot_IQR <- Q1-1.5*(Q3-Q1)
k <- 1
perc_out <- c()
for(col in head(colnames(df_class01),-1)){
count_top_out <- df_class01[col]>=top_IQR[k] %>% as.vector()
count_bot_out <- df_class01[col]<=bot_IQR[k] %>% as.vector()
perc_out <- c(perc_out,(sum(count_top_out)+sum(count_bot_out))/(df_class01 %>% nrow()))
k <- k+1
} # el vector perc_out representa el porcentaje de outliers de cada variable.
# Creamos el df final con todos los estadísticos para cada clase
## Calculamos los estadísticos para la clase 1
desc_df01 <- stat.desc(df_class01[,-which(names(df_class01) == "Class")]) %>% slice(., 4:ncol(df_class01[,-which(names(df_class01) == "Class")]))
## Añadimos los porcentajes de outliers para el dataframe de la clase 1
perc_out_class01 <- data.frame(t(head(perc_out,-1)))
colnames(perc_out_class01) <- colnames(desc_df01)
# Poner nombre primeras columnas (footnote)
# Definimos un df para cada categoría
cat.vec <- df$Class %>% table() %>% names()
df_class01 <- df %>% filter(.,Class == cat.vec[1]) # Çerçevelik
df_class02 <- df %>% filter(.,Class == cat.vec[2]) # Ürgüp Sivrisi
# Calculamos los cuantiles para cada clase
## Clase 1
col_numeric <- which( sapply(df_class01, is.numeric ) ) # Creamos un selector de las columnas numéricas
quantile_df01 <- sapply(col_numeric, function( y ) {
quantile( x = unlist( df_class01[,  y ] ), c(.25,.5,.75))
}) %>% as.data.frame()
rownames(quantile_df01) <- c("Q1","Q2","Q3")
# Calculamos el % de outliers para cada clase
## Clase 1
Q1 <- quantile_df01['Q1',] %>% as.vector() %>% as.numeric()
Q3 <- quantile_df01['Q3',] %>% as.vector() %>% as.numeric()
top_IQR <- Q3+1.5*(Q3-Q1) #111027.750000
bot_IQR <- Q1-1.5*(Q3-Q1)
k <- 1
perc_out <- c()
for(col in head(colnames(df_class01),-1)){
count_top_out <- df_class01[col]>=top_IQR[k] %>% as.vector()
count_bot_out <- df_class01[col]<=bot_IQR[k] %>% as.vector()
perc_out <- c(perc_out,(sum(count_top_out)+sum(count_bot_out))/(df_class01 %>% nrow()))
k <- k+1
} # el vector perc_out representa el porcentaje de outliers de cada variable.
# Creamos el df final con todos los estadísticos para cada clase
## Calculamos los estadísticos para la clase 1
desc_df01 <- stat.desc(df_class01[,-which(names(df_class01) == "Class")]) %>% slice(., 4:ncol(df_class01[,-which(names(df_class01) == "Class")]))
## Añadimos los porcentajes de outliers para el dataframe de la clase 1
perc_out_class01 <- data.frame(t(head(perc_out,-1)))
colnames(perc_out_class01) <- colnames(desc_df01) %>% head(.,-1))
# Poner nombre primeras columnas (footnote)
# Definimos un df para cada categoría
cat.vec <- df$Class %>% table() %>% names()
df_class01 <- df %>% filter(.,Class == cat.vec[1]) # Çerçevelik
df_class02 <- df %>% filter(.,Class == cat.vec[2]) # Ürgüp Sivrisi
# Calculamos los cuantiles para cada clase
## Clase 1
col_numeric <- which( sapply(df_class01, is.numeric ) ) # Creamos un selector de las columnas numéricas
quantile_df01 <- sapply(col_numeric, function( y ) {
quantile( x = unlist( df_class01[,  y ] ), c(.25,.5,.75))
}) %>% as.data.frame()
rownames(quantile_df01) <- c("Q1","Q2","Q3")
# Calculamos el % de outliers para cada clase
## Clase 1
Q1 <- quantile_df01['Q1',] %>% as.vector() %>% as.numeric()
Q3 <- quantile_df01['Q3',] %>% as.vector() %>% as.numeric()
top_IQR <- Q3+1.5*(Q3-Q1) #111027.750000
bot_IQR <- Q1-1.5*(Q3-Q1)
k <- 1
perc_out <- c()
for(col in head(colnames(df_class01),-1)){
count_top_out <- df_class01[col]>=top_IQR[k] %>% as.vector()
count_bot_out <- df_class01[col]<=bot_IQR[k] %>% as.vector()
perc_out <- c(perc_out,(sum(count_top_out)+sum(count_bot_out))/(df_class01 %>% nrow()))
k <- k+1
} # el vector perc_out representa el porcentaje de outliers de cada variable.
# Creamos el df final con todos los estadísticos para cada clase
## Calculamos los estadísticos para la clase 1
desc_df01 <- stat.desc(df_class01[,-which(names(df_class01) == "Class")]) %>% slice(., 4:ncol(df_class01[,-which(names(df_class01) == "Class")]))
## Añadimos los porcentajes de outliers para el dataframe de la clase 1
perc_out_class01 <- data.frame(t(head(perc_out,-1)))
colnames(perc_out_class01) <- colnames(desc_df01) %>% head(.,-1)
rownames(perc_out_class01) <- c("perc.out") #
desc_class01 <- desc_df01 %>%  bind_rows(.,perc_out_class01)
desc_class01 %>% kable(., format = "markdown")
# %>% kable(., format = "markdown")
?options()
View(perc_out_class01)
perc_out
head(colnames(desc_df01),-1)
colnames(desc_df01)
perc_out
perc_out*100
library(kable)
library(dplyr)
install.packages("kableExtra")
library(kableExtra)
?footnote
?kable_minimal
?footnote
?stat.desc
stat.desc(df_class01[,-which(names(df_class01) == "Class")])
library(readxl)
library(dplyr)
library(knitr)
library(ggplot2)
library(ggpubr)
library(pastecs)
library(kableExtra)
options(scipen=999) # desactivamos la notación científica
df <- readxl::read_excel("../dbs/Pumpkin_Seeds_Dataset/Pumpkin_Seeds_Dataset.xlsx")
table(df$Class)
# Poner nombre primeras columnas (footnote)
# Definimos un df para cada categoría
cat.vec <- df$Class %>% table() %>% names()
df_class01 <- df %>% filter(.,Class == cat.vec[1]) # Çerçevelik
df_class02 <- df %>% filter(.,Class == cat.vec[2]) # Ürgüp Sivrisi
# Calculamos los cuantiles para cada clase
## Clase 1
col_numeric <- which( sapply(df_class01, is.numeric ) ) # Creamos un selector de las columnas numéricas
quantile_df01 <- sapply(col_numeric, function( y ) {
quantile( x = unlist( df_class01[,  y ] ), c(.25,.5,.75))
}) %>% as.data.frame()
rownames(quantile_df01) <- c("Q1","Q2","Q3")
## Clase 2
col_numeric <- which( sapply(df_class02, is.numeric ) ) # Creamos un selector de las columnas numéricas
quantile_df02 <- sapply(col_numeric, function( y ) {
quantile( x = unlist( df_class02[,  y ] ), c(.25,.5,.75))
}) %>% as.data.frame()
rownames(quantile_df02) <- c("Q1","Q2","Q3")
# Calculamos el % de outliers para cada clase
## Clase 1
Q1 <- quantile_df01['Q1',] %>% as.vector() %>% as.numeric()
Q3 <- quantile_df01['Q3',] %>% as.vector() %>% as.numeric()
top_IQR <- Q3+1.5*(Q3-Q1) #111027.750000
bot_IQR <- Q1-1.5*(Q3-Q1)
k <- 1
perc_out01 <- c()
for(col in head(colnames(df_class01),-1)){
count_top_out <- df_class01[col]>=top_IQR[k] %>% as.vector()
count_bot_out <- df_class01[col]<=bot_IQR[k] %>% as.vector()
perc_out01 <- c(perc_out01,100*(sum(count_top_out)+sum(count_bot_out))/(df_class01 %>% nrow()))
k <- k+1
} # el vector perc_out representa el porcentaje de outliers de cada variable.
## Clase 2
Q1 <- quantile_df02['Q1',] %>% as.vector() %>% as.numeric()
Q3 <- quantile_df02['Q3',] %>% as.vector() %>% as.numeric()
top_IQR <- Q3+1.5*(Q3-Q1)
bot_IQR <- Q1-1.5*(Q3-Q1)
k <- 1
perc_out02 <- c()
for(col in head(colnames(df_class02),-1)){
count_top_out <- df_class02[col]>=top_IQR[k] %>% as.vector()
count_bot_out <- df_class02[col]<=bot_IQR[k] %>% as.vector()
perc_out02 <- c(perc_out02,100*(sum(count_top_out)+sum(count_bot_out))/(df_class02 %>% nrow()))
k <- k+1
} # el vector perc_out representa el porcentaje de outliers de cada variable.
# Creamos el df final con todos los estadísticos para cada clase
## Calculamos los estadísticos para la clase 1
desc_df01 <- stat.desc(df_class01[,-which(names(df_class01) == "Class")]) %>% slice(., 4:ncol(df_class01[,-which(names(df_class01) == "Class")]))
## Añadimos los porcentajes de outliers para el dataframe de la clase 1
perc_out_class01 <- data.frame(t(perc_out01))
colnames(perc_out_class01) <-  colnames(desc_df01)
rownames(perc_out_class01) <- c("perc.out") #
fn1='range'
fn2='This is footnote 2 and is much longer'
desc_class01 <- desc_df01 %>%  bind_rows(.,perc_out_class01)
desc_class01  %>% kbl() %>% kable_minimal("hover", full_width = F)%>%
footnote(c(fn1, fn2), general_title="Tabla A")
# df %>% kable(., format = "markdown",caption = "This is the table caption")
stat.desc(df_class01[,-which(names(df_class01) == "Class")]) %>% View()
stat.desc(df_class01[,-which(names(df_class01) == "Class")]) %>% slice(., 4:ncol(df_class01[,-which(names(df_class01) == "Class")])) %>% View()
stat.desc(df_class01[,-which(names(df_class01) == "Class")]) %>% slice(., 4:ncol(df_class01[,-which(names(df_class01) == "Class")])) %>% View()
stat.desc(df_class01[,-which(names(df_class01) == "Class")]) %>% View()
stat.desc(df_class01[,-which(names(df_class01) == "Class")]) %>% slice(., c(4,5,8,9,10,13)) %>% View()
# Poner nombre primeras columnas (footnote)
# Definimos un df para cada categoría
cat.vec <- df$Class %>% table() %>% names()
df_class01 <- df %>% filter(.,Class == cat.vec[1]) # Çerçevelik
df_class02 <- df %>% filter(.,Class == cat.vec[2]) # Ürgüp Sivrisi
# Calculamos los cuantiles para cada clase
## Clase 1
col_numeric <- which( sapply(df_class01, is.numeric ) ) # Creamos un selector de las columnas numéricas
quantile_df01 <- sapply(col_numeric, function( y ) {
quantile( x = unlist( df_class01[,  y ] ), c(.25,.5,.75))
}) %>% as.data.frame()
rownames(quantile_df01) <- c("Q1","Q2","Q3")
## Clase 2
col_numeric <- which( sapply(df_class02, is.numeric ) ) # Creamos un selector de las columnas numéricas
quantile_df02 <- sapply(col_numeric, function( y ) {
quantile( x = unlist( df_class02[,  y ] ), c(.25,.5,.75))
}) %>% as.data.frame()
rownames(quantile_df02) <- c("Q1","Q2","Q3")
# Calculamos el % de outliers para cada clase
## Clase 1
Q1 <- quantile_df01['Q1',] %>% as.vector() %>% as.numeric()
Q3 <- quantile_df01['Q3',] %>% as.vector() %>% as.numeric()
top_IQR <- Q3+1.5*(Q3-Q1) #111027.750000
bot_IQR <- Q1-1.5*(Q3-Q1)
k <- 1
perc_out01 <- c()
for(col in head(colnames(df_class01),-1)){
count_top_out <- df_class01[col]>=top_IQR[k] %>% as.vector()
count_bot_out <- df_class01[col]<=bot_IQR[k] %>% as.vector()
perc_out01 <- c(perc_out01,100*(sum(count_top_out)+sum(count_bot_out))/(df_class01 %>% nrow()))
k <- k+1
} # el vector perc_out representa el porcentaje de outliers de cada variable.
## Clase 2
Q1 <- quantile_df02['Q1',] %>% as.vector() %>% as.numeric()
Q3 <- quantile_df02['Q3',] %>% as.vector() %>% as.numeric()
top_IQR <- Q3+1.5*(Q3-Q1)
bot_IQR <- Q1-1.5*(Q3-Q1)
k <- 1
perc_out02 <- c()
for(col in head(colnames(df_class02),-1)){
count_top_out <- df_class02[col]>=top_IQR[k] %>% as.vector()
count_bot_out <- df_class02[col]<=bot_IQR[k] %>% as.vector()
perc_out02 <- c(perc_out02,100*(sum(count_top_out)+sum(count_bot_out))/(df_class02 %>% nrow()))
k <- k+1
} # el vector perc_out representa el porcentaje de outliers de cada variable.
# Creamos el df final con todos los estadísticos para cada clase
## Calculamos los estadísticos para la clase 1
desc_df01 <- stat.desc(df_class01[,-which(names(df_class01) == "Class")]) %>% slice(., c(4,5,8,9,10,13))
## Añadimos los porcentajes de outliers para el dataframe de la clase 1
perc_out_class01 <- data.frame(t(perc_out01))
colnames(perc_out_class01) <-  colnames(desc_df01)
rownames(perc_out_class01) <- c("perc.out") #
fn1='range'
fn2='This is footnote 2 and is much longer'
desc_class01 <- desc_df01 %>%  bind_rows(.,perc_out_class01)
desc_class01  %>% kbl() %>% kable_minimal("hover", full_width = F)%>%
footnote(c(fn1, fn2), general_title="Tabla A")
# df %>% kable(., format = "markdown",caption = "This is the table caption")
?footnote
?stat.desc
?pastecs::stat.desc
?footnote
cat.vec
