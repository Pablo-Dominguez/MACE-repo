setwd("~/Documents/MUM/MACE/2ndo Bloque/Entrega/source")
setwd("~/Documents/MUM/MACE/2ndo Bloque/Entrega/source")
library(readxl)
library(dplyr)
library(knitr)
library(ggplot2)
library(ggpubr)
library(pastecs)
library(kableExtra)
options(scipen=999) # desactivamos la notación científica
df <- readxl::read_excel("../dbs/Pumpkin_Seeds_Dataset/Pumpkin_Seeds_Dataset.xlsx")
table(df$Class)
col_numeric <- which( sapply(df_class01, is.numeric ) ) # Creamos un selector de las columnas numéricas
quantile_df01 <- sapply(col_numeric, function( y ) {
quantile( x = unlist( df_class01[,  y ] ), c(.1,.9))
}) %>% as.data.frame()
rownames(quantile_df01) <- c("P10","P90")
# Poner nombre primeras columnas (footnote)
# Definimos un df para cada categoría
cat.vec <- df$Class %>% table() %>% names()
df_class01 <- df %>% filter(.,Class == cat.vec[1]) # Çerçevelik
df_class02 <- df %>% filter(.,Class == cat.vec[2]) # Ürgüp Sivrisi
# Calculamos los cuantiles para cada clase
## Clase 1
col_numeric <- which( sapply(df_class01, is.numeric ) ) # Creamos un selector de las columnas numéricas
quantile_df01 <- sapply(col_numeric, function( y ) {
quantile( x = unlist( df_class01[,  y ] ), c(.25,.5,.75))
}) %>% as.data.frame()
rownames(quantile_df01) <- c("Q1","Q2","Q3")
## Clase 2
col_numeric <- which( sapply(df_class02, is.numeric ) ) # Creamos un selector de las columnas numéricas
quantile_df02 <- sapply(col_numeric, function( y ) {
quantile( x = unlist( df_class02[,  y ] ), c(.25,.5,.75))
}) %>% as.data.frame()
rownames(quantile_df02) <- c("Q1","Q2","Q3")
# Calculamos el % de outliers para cada clase
## Clase 1
Q1 <- quantile_df01['Q1',] %>% as.vector() %>% as.numeric()
Q3 <- quantile_df01['Q3',] %>% as.vector() %>% as.numeric()
top_IQR <- Q3+1.5*(Q3-Q1) #111027.750000
bot_IQR <- Q1-1.5*(Q3-Q1)
k <- 1
perc_out01 <- c()
for(col in head(colnames(df_class01),-1)){
count_top_out <- df_class01[col]>=top_IQR[k] %>% as.vector()
count_bot_out <- df_class01[col]<=bot_IQR[k] %>% as.vector()
perc_out01 <- c(perc_out01,100*(sum(count_top_out)+sum(count_bot_out))/(df_class01 %>% nrow()))
k <- k+1
} # el vector perc_out representa el porcentaje de outliers de cada variable.
## Clase 2
Q1 <- quantile_df02['Q1',] %>% as.vector() %>% as.numeric()
Q3 <- quantile_df02['Q3',] %>% as.vector() %>% as.numeric()
top_IQR <- Q3+1.5*(Q3-Q1)
bot_IQR <- Q1-1.5*(Q3-Q1)
k <- 1
perc_out02 <- c()
for(col in head(colnames(df_class02),-1)){
count_top_out <- df_class02[col]>=top_IQR[k] %>% as.vector()
count_bot_out <- df_class02[col]<=bot_IQR[k] %>% as.vector()
perc_out02 <- c(perc_out02,100*(sum(count_top_out)+sum(count_bot_out))/(df_class02 %>% nrow()))
k <- k+1
} # el vector perc_out representa el porcentaje de outliers de cada variable.
# Creamos el df final con todos los estadísticos para cada clase
## Calculamos los estadísticos para la clase 1
desc_df01 <- stat.desc(df_class01[,-which(names(df_class01) == "Class")]) %>% slice(., c(4,5,8,9,10,13))
## Añadimos los porcentajes de outliers para el dataframe de la clase 1
perc_out_class01 <- data.frame(t(perc_out01))
colnames(perc_out_class01) <-  colnames(desc_df01)
rownames(perc_out_class01) <- c("perc.out") #
fn1='Más información sobre los principales estadísticos en `?pastecs::stat.desc`.'
fn2='`perc.out`: Es el porcentaje de outliers para cada variable, según el [criterio de Tukey](https://es.wikipedia.org/wiki/Diagrama_de_caja).'
desc_class01 <- desc_df01 %>%  bind_rows(.,perc_out_class01)
desc_class01  %>% kbl() %>% kable_minimal("hover", full_width = F)%>%
footnote(number=c(fn1,fn2), number_title="Estadísticos Clase Çerçevelik", title_format = "bold") %>%  scroll_box(width = "auto")
## Calculamos los estadísticos para la clase 2
desc_df02 <- stat.desc(df_class02[,-which(names(df_class02) == "Class")]) %>% slice(., c(4,5,8,9,10,13))
## Añadimos los porcentajes de outliers para el dataframe de la clase 1
perc_out_class02 <- data.frame(t(perc_out02))
colnames(perc_out_class02) <-  colnames(desc_df02)
rownames(perc_out_class02) <- c("perc.out") #
desc_class02 <- desc_df02 %>%  bind_rows(.,perc_out_class02)
desc_class02  %>% kbl() %>% kable_minimal("hover", full_width = F)%>%
footnote(c(""),general_title="Estadísticos Clase Ürgüp Sivrisi", title_format = "bold") %>%  scroll_box(width = "auto")
col_numeric <- which( sapply(df_class01, is.numeric ) ) # Creamos un selector de las columnas numéricas
quantile_df01 <- sapply(col_numeric, function( y ) {
quantile( x = unlist( df_class01[,  y ] ), c(.1,.9))
}) %>% as.data.frame()
rownames(quantile_df01) <- c("P10","P90")
quantile_df01 %>% View
View(quantile_df01)
View(quantile_df01)
# Poner nombre primeras columnas (footnote)
# Definimos un df para cada categoría
cat.vec <- df$Class %>% table() %>% names()
df_class01 <- df %>% filter(.,Class == cat.vec[1]) # Çerçevelik
df_class02 <- df %>% filter(.,Class == cat.vec[2]) # Ürgüp Sivrisi
# Calculamos los cuantiles para cada clase
## Clase 1
col_numeric <- which( sapply(df_class01, is.numeric ) ) # Creamos un selector de las columnas numéricas
quantile_df01 <- sapply(col_numeric, function( y ) {
quantile( x = unlist( df_class01[,  y ] ), c(.1,.25,.5,.75,.9))
}) %>% as.data.frame()
rownames(quantile_df01) <- c("P10","Q1","Q2","Q3","P90")
## Clase 2
col_numeric <- which( sapply(df_class02, is.numeric ) ) # Creamos un selector de las columnas numéricas
quantile_df02 <- sapply(col_numeric, function( y ) {
quantile( x = unlist( df_class02[,  y ] ), c(.1,.25,.5,.75,.9))
}) %>% as.data.frame()
rownames(quantile_df02) <- c("P10","Q1","Q2","Q3","P90")
# Calculamos el % de outliers para cada clase
## Clase 1
Q1 <- quantile_df01['Q1',] %>% as.vector() %>% as.numeric()
Q3 <- quantile_df01['Q3',] %>% as.vector() %>% as.numeric()
top_IQR <- Q3+1.5*(Q3-Q1) #111027.750000
bot_IQR <- Q1-1.5*(Q3-Q1)
k <- 1
perc_out01 <- c()
for(col in head(colnames(df_class01),-1)){
count_top_out <- df_class01[col]>=top_IQR[k] %>% as.vector()
count_bot_out <- df_class01[col]<=bot_IQR[k] %>% as.vector()
perc_out01 <- c(perc_out01,100*(sum(count_top_out)+sum(count_bot_out))/(df_class01 %>% nrow()))
k <- k+1
} # el vector perc_out representa el porcentaje de outliers de cada variable.
## Clase 2
Q1 <- quantile_df02['Q1',] %>% as.vector() %>% as.numeric()
Q3 <- quantile_df02['Q3',] %>% as.vector() %>% as.numeric()
top_IQR <- Q3+1.5*(Q3-Q1)
bot_IQR <- Q1-1.5*(Q3-Q1)
k <- 1
perc_out02 <- c()
for(col in head(colnames(df_class02),-1)){
count_top_out <- df_class02[col]>=top_IQR[k] %>% as.vector()
count_bot_out <- df_class02[col]<=bot_IQR[k] %>% as.vector()
perc_out02 <- c(perc_out02,100*(sum(count_top_out)+sum(count_bot_out))/(df_class02 %>% nrow()))
k <- k+1
} # el vector perc_out representa el porcentaje de outliers de cada variable.
# Creamos el df final con todos los estadísticos para cada clase
## Calculamos los estadísticos para la clase 1
desc_df01 <- stat.desc(df_class01[,-which(names(df_class01) == "Class")]) %>% slice(., c(4,5,8,9,10,13))
## Añadimos los porcentajes de outliers para el dataframe de la clase 1
perc_out_class01 <- data.frame(t(perc_out01))
colnames(perc_out_class01) <-  colnames(desc_df01)
rownames(perc_out_class01) <- c("perc.out") #
fn1='Más información sobre los principales estadísticos en `?pastecs::stat.desc`.'
fn2='`perc.out`: Es el porcentaje de outliers para cada variable, según el [criterio de Tukey](https://es.wikipedia.org/wiki/Diagrama_de_caja).'
desc_class01 <- desc_df01 %>%  bind_rows(.,perc_out_class01)
desc_class01  %>% kbl() %>% kable_minimal("hover", full_width = F)%>%
footnote(number=c(fn1,fn2), number_title="Estadísticos Clase Çerçevelik", title_format = "bold") %>%  scroll_box(width = "auto")
## Calculamos los estadísticos para la clase 2
desc_df02 <- stat.desc(df_class02[,-which(names(df_class02) == "Class")]) %>% slice(., c(4,5,8,9,10,13))
## Añadimos los porcentajes de outliers para el dataframe de la clase 1
perc_out_class02 <- data.frame(t(perc_out02))
colnames(perc_out_class02) <-  colnames(desc_df02)
rownames(perc_out_class02) <- c("perc.out") #
desc_class02 <- desc_df02 %>%  bind_rows(.,perc_out_class02)
desc_class02  %>% kbl() %>% kable_minimal("hover", full_width = F)%>%
footnote(c(""),general_title="Estadísticos Clase Ürgüp Sivrisi", title_format = "bold") %>%  scroll_box(width = "auto")
View(quantile_df01)
View(quantile_df01)
df_class01 %>% mutate_each()
df_class01 %>% View()
df_class01 %>% mutate_each(funs(sum), -Class) %>% View
quantile_df01$"Area"
trimmed_df_class01 <- data.frame(df_class01)
# Poner nombre primeras columnas (footnote)
# Definimos un df para cada categoría
cat.vec <- df$Class %>% table() %>% names()
df_class01 <- df %>% filter(.,Class == cat.vec[1]) # Çerçevelik
df_class02 <- df %>% filter(.,Class == cat.vec[2]) # Ürgüp Sivrisi
# Calculamos los cuantiles para cada clase
## Clase 1
col_numeric <- which( sapply(df_class01, is.numeric ) ) # Creamos un selector de las columnas numéricas
quantile_df01 <- sapply(col_numeric, function( y ) {
quantile( x = unlist( df_class01[,  y ] ), c(.1,.25,.5,.75,.9))
}) %>% as.data.frame()
rownames(quantile_df01) <- c("P10","Q1","Q2","Q3","P90")
## Clase 2
col_numeric <- which( sapply(df_class02, is.numeric ) ) # Creamos un selector de las columnas numéricas
quantile_df02 <- sapply(col_numeric, function( y ) {
quantile( x = unlist( df_class02[,  y ] ), c(.1,.25,.5,.75,.9))
}) %>% as.data.frame()
rownames(quantile_df02) <- c("P10","Q1","Q2","Q3","P90")
# Calculamos el % de outliers para cada clase
## Clase 1
Q1 <- quantile_df01['Q1',] %>% as.vector() %>% as.numeric()
Q3 <- quantile_df01['Q3',] %>% as.vector() %>% as.numeric()
top_IQR <- Q3+1.5*(Q3-Q1) #111027.750000
bot_IQR <- Q1-1.5*(Q3-Q1)
k <- 1
perc_out01 <- c()
for(col in head(colnames(df_class01),-1)){
count_top_out <- df_class01[col]>=top_IQR[k] %>% as.vector()
count_bot_out <- df_class01[col]<=bot_IQR[k] %>% as.vector()
perc_out01 <- c(perc_out01,100*(sum(count_top_out)+sum(count_bot_out))/(df_class01 %>% nrow()))
k <- k+1
} # el vector perc_out representa el porcentaje de outliers de cada variable.
## Clase 2
Q1 <- quantile_df02['Q1',] %>% as.vector() %>% as.numeric()
Q3 <- quantile_df02['Q3',] %>% as.vector() %>% as.numeric()
top_IQR <- Q3+1.5*(Q3-Q1)
bot_IQR <- Q1-1.5*(Q3-Q1)
k <- 1
perc_out02 <- c()
for(col in head(colnames(df_class02),-1)){
count_top_out <- df_class02[col]>=top_IQR[k] %>% as.vector()
count_bot_out <- df_class02[col]<=bot_IQR[k] %>% as.vector()
perc_out02 <- c(perc_out02,100*(sum(count_top_out)+sum(count_bot_out))/(df_class02 %>% nrow()))
k <- k+1
} # el vector perc_out representa el porcentaje de outliers de cada variable.
# Creamos el df final con todos los estadísticos para cada clase
## Calculamos los estadísticos para la clase 1
desc_df01 <- stat.desc(df_class01[,-which(names(df_class01) == "Class")]) %>% slice(., c(4,5,8,9,10,13))
## Añadimos los porcentajes de outliers para el dataframe de la clase 1
perc_out_class01 <- data.frame(t(perc_out01))
colnames(perc_out_class01) <-  colnames(desc_df01)
rownames(perc_out_class01) <- c("perc.out") #
fn1='Más información sobre los principales estadísticos en `?pastecs::stat.desc`.'
fn2='`perc.out`: Es el porcentaje de outliers para cada variable, según el [criterio de Tukey](https://es.wikipedia.org/wiki/Diagrama_de_caja).'
desc_class01 <- desc_df01 %>%  bind_rows(.,perc_out_class01)
desc_class01  %>% kbl() %>% kable_minimal("hover", full_width = F)%>%
footnote(number=c(fn1,fn2), number_title="Estadísticos Clase Çerçevelik", title_format = "bold") %>%  scroll_box(width = "auto")
## Calculamos los estadísticos para la clase 2
desc_df02 <- stat.desc(df_class02[,-which(names(df_class02) == "Class")]) %>% slice(., c(4,5,8,9,10,13))
## Añadimos los porcentajes de outliers para el dataframe de la clase 1
perc_out_class02 <- data.frame(t(perc_out02))
colnames(perc_out_class02) <-  colnames(desc_df02)
rownames(perc_out_class02) <- c("perc.out") #
desc_class02 <- desc_df02 %>%  bind_rows(.,perc_out_class02)
desc_class02  %>% kbl() %>% kable_minimal("hover", full_width = F)%>%
footnote(c(""),general_title="Estadísticos Clase Ürgüp Sivrisi", title_format = "bold") %>%  scroll_box(width = "auto")
library(readxl)
library(dplyr)
library(knitr)
library(ggplot2)
library(ggpubr)
library(pastecs)
library(kableExtra)
options(scipen=999) # desactivamos la notación científica
df <- readxl::read_excel("../dbs/Pumpkin_Seeds_Dataset/Pumpkin_Seeds_Dataset.xlsx")
table(df$Class)
# Poner nombre primeras columnas (footnote)
# Definimos un df para cada categoría
cat.vec <- df$Class %>% table() %>% names()
df_class01 <- df %>% filter(.,Class == cat.vec[1]) # Çerçevelik
df_class02 <- df %>% filter(.,Class == cat.vec[2]) # Ürgüp Sivrisi
# Calculamos los cuantiles para cada clase
## Clase 1
col_numeric <- which( sapply(df_class01, is.numeric ) ) # Creamos un selector de las columnas numéricas
quantile_df01 <- sapply(col_numeric, function( y ) {
quantile( x = unlist( df_class01[,  y ] ), c(.1,.25,.5,.75,.9))
}) %>% as.data.frame()
rownames(quantile_df01) <- c("P10","Q1","Q2","Q3","P90")
## Clase 2
col_numeric <- which( sapply(df_class02, is.numeric ) ) # Creamos un selector de las columnas numéricas
quantile_df02 <- sapply(col_numeric, function( y ) {
quantile( x = unlist( df_class02[,  y ] ), c(.1,.25,.5,.75,.9))
}) %>% as.data.frame()
rownames(quantile_df02) <- c("P10","Q1","Q2","Q3","P90")
# Calculamos el % de outliers para cada clase
## Clase 1
Q1 <- quantile_df01['Q1',] %>% as.vector() %>% as.numeric()
Q3 <- quantile_df01['Q3',] %>% as.vector() %>% as.numeric()
top_IQR <- Q3+1.5*(Q3-Q1) #111027.750000
bot_IQR <- Q1-1.5*(Q3-Q1)
k <- 1
perc_out01 <- c()
for(col in head(colnames(df_class01),-1)){
count_top_out <- df_class01[col]>=top_IQR[k] %>% as.vector()
count_bot_out <- df_class01[col]<=bot_IQR[k] %>% as.vector()
perc_out01 <- c(perc_out01,100*(sum(count_top_out)+sum(count_bot_out))/(df_class01 %>% nrow()))
k <- k+1
} # el vector perc_out representa el porcentaje de outliers de cada variable.
## Clase 2
Q1 <- quantile_df02['Q1',] %>% as.vector() %>% as.numeric()
Q3 <- quantile_df02['Q3',] %>% as.vector() %>% as.numeric()
top_IQR <- Q3+1.5*(Q3-Q1)
bot_IQR <- Q1-1.5*(Q3-Q1)
k <- 1
perc_out02 <- c()
for(col in head(colnames(df_class02),-1)){
count_top_out <- df_class02[col]>=top_IQR[k] %>% as.vector()
count_bot_out <- df_class02[col]<=bot_IQR[k] %>% as.vector()
perc_out02 <- c(perc_out02,100*(sum(count_top_out)+sum(count_bot_out))/(df_class02 %>% nrow()))
k <- k+1
} # el vector perc_out representa el porcentaje de outliers de cada variable.
# Creamos el df final con todos los estadísticos para cada clase
## Calculamos los estadísticos para la clase 1
desc_df01 <- stat.desc(df_class01[,-which(names(df_class01) == "Class")]) %>% slice(., c(4,5,8,9,10,13))
## Añadimos los porcentajes de outliers para el dataframe de la clase 1
perc_out_class01 <- data.frame(t(perc_out01))
colnames(perc_out_class01) <-  colnames(desc_df01)
rownames(perc_out_class01) <- c("perc.out") #
fn1='Más información sobre los principales estadísticos en `?pastecs::stat.desc`.'
fn2='`perc.out`: Es el porcentaje de outliers para cada variable, según el [criterio de Tukey](https://es.wikipedia.org/wiki/Diagrama_de_caja).'
desc_class01 <- desc_df01 %>%  bind_rows(.,perc_out_class01)
desc_class01  %>% kbl() %>% kable_minimal("hover", full_width = F)%>%
footnote(number=c(fn1,fn2), number_title="Estadísticos Clase Çerçevelik", title_format = "bold") %>%  scroll_box(width = "auto")
## Calculamos los estadísticos para la clase 2
desc_df02 <- stat.desc(df_class02[,-which(names(df_class02) == "Class")]) %>% slice(., c(4,5,8,9,10,13))
## Añadimos los porcentajes de outliers para el dataframe de la clase 1
perc_out_class02 <- data.frame(t(perc_out02))
colnames(perc_out_class02) <-  colnames(desc_df02)
rownames(perc_out_class02) <- c("perc.out") #
desc_class02 <- desc_df02 %>%  bind_rows(.,perc_out_class02)
desc_class02  %>% kbl() %>% kable_minimal("hover", full_width = F)%>%
footnote(c(""),general_title="Estadísticos Clase Ürgüp Sivrisi", title_format = "bold") %>%  scroll_box(width = "auto")
Q1 <- quantile_df01['Q1',] %>% as.vector() %>% as.numeric()
Q3 <- quantile_df01['Q3',] %>% as.vector() %>% as.numeric()
P10 <- quantile_df01['P10',] %>% as.vector() %>% as.numeric()
P90 <- quantile_df01['P90',] %>% as.vector() %>% as.numeric()
top_IQR <- Q3+1.5*(Q3-Q1) #111027.750000
bot_IQR <- Q1-1.5*(Q3-Q1)
P90
trimmed_df_class01 <- data.frame(df_class01)
k <- 1
perc_out01 <- c()
for(col in head(colnames(trimmed_df_class01),-1)){
trimmed_df_class01$col[trimmed_df_class01$col <= bot_IQR[k]] <- P10[k]
trimmed_df_class01$col[trimmed_df_class01$col >= top_IQR[k]] <- P90[k]
count_top_out <- trimmed_df_class01[col]>=top_IQR[k] %>% as.vector()
count_bot_out <- trimmed_df_class01[col]<=bot_IQR[k] %>% as.vector()
perc_out01 <- c(perc_out01,100*(sum(count_top_out)+sum(count_bot_out))/(trimmed_df_class01 %>% nrow()))
k <- k+1
}
trimmed_df_class01$col[trimmed_df_class01$col <= bot_IQR[k]] <- P10[k]
col
k
trimmed_df_class01$col[trimmed_df_class01$col <= bot_IQR[k]]
P10[k]
trimmed_df_class01$col[trimmed_df_class01$col <= bot_IQR[k]]
trimmed_df_class01$col[trimmed_df_class01$col <= bot_IQR[k]] <- P10[k]
trimmed_df_class01$"Area"[trimmed_df_class01$"Area" <= bot_IQR[k]] <- P10[k]
for(col in head(colnames(trimmed_df_class01),-1)){ print(col)}
for(col in head(colnames(trimmed_df_class01),-1)){ print(col %>% typeof())}
head(colnames(trimmed_df_class01),-1))
head(colnames(trimmed_df_class01),-1)
head(colnames(trimmed_df_class01),-1) %>% length()
trimmed_df_class01$col[trimmed_df_class01$col <= bot_IQR[k]]
trimmed_df_class01$"Area"[trimmed_df_class01$"Area" <= bot_IQR[k]]
trimmed_df_class01$"Area"[trimmed_df_class01$"Area" >= bot_IQR[k]]
trimmed_df_class01$col[trimmed_df_class01$col >= top_IQR[k]]
trimmed_df_class01$col[trimmed_df_class01$col >= top_IQR[k]] <- 3
trimmed_df_class01$col[trimmed_df_class01$col <= top_IQR[k]] <- 3
rep(x,3)
rep('t',3)
trimmed_df_class01$col[trimmed_df_class01$col <= bot_IQR[k]] <- P10[k]
trimmed_df_class01$col[trimmed_df_class01$col <= bot_IQR[k]] <- rep(P10[k],nrow(trimmed_df_class01))
trimmed_df_class01$col[trimmed_df_class01$col <= bot_IQR[k]]
is.null(trimmed_df_class01$col[trimmed_df_class01$col <= bot_IQR[k]])
trimmed_df_class01$col[trimmed_df_class01$col >= bot_IQR[k]]
trimmed_df_class01$col[trimmed_df_class01$col <= bot_IQR[k]]
col
k
bot_IQR
k <- 12
trimmed_df_class01$col[trimmed_df_class01$col <= bot_IQR[k]]
trimmed_df_class01$col[trimmed_df_class01$col >= bot_IQR[k]]
col
i <- 1
trimmed_df_class01[ , i][trimmed_df_class01[ , i] <= bot_IQR[i]]
trimmed_df_class01[ , i][trimmed_df_class01[ , i] Q= bot_IQR[i]]
trimmed_df_class01[ , i][trimmed_df_class01[ , i] >= bot_IQR[i]]
trimmed_df_class01[ , i][trimmed_df_class01[ , i] >= bot_IQR[i]] <- 2
trimmed_df_class01[ , i][trimmed_df_class01[ , i] <= bot_IQR[i]] <- 1
