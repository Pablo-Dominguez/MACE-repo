setwd("~/Documents/MUM/MACE/2ndo Bloque/Entrega/source")
library(readxl)
library(dplyr)
library(knitr)
library(ggplot2)
library(ggpubr)
df <- readxl::read_excel("../Pumpkin_Seeds_Dataset/Pumpkin_Seeds_Dataset.xlsx")
p <- ggplot(df, aes_string(x="Class", y=colu, color="Class")) + geom_boxplot() + theme(
axis.text.x = element_blank(),
axis.text.y = element_text(size=6),
axis.title.x = element_text(size = 8),
axis.title.y = element_text(size = 8),
legend.key.size = unit(0.1, 'cm'),
legend.text = element_text(size=8),
legend.title = element_blank())
p <- ggplot(df, aes_string(x="Class", y="Area", color="Class")) + geom_boxplot() + theme(
axis.text.x = element_blank(),
axis.text.y = element_text(size=6),
axis.title.x = element_text(size = 8),
axis.title.y = element_text(size = 8),
legend.key.size = unit(0.1, 'cm'),
legend.text = element_text(size=8),
legend.title = element_blank())
p
p <- ggplot(df, aes_string(x="Class", y="Area", color="Class")) + geom_boxplot()+geom_violin() + theme(
axis.text.x = element_blank(),
axis.text.y = element_text(size=6),
axis.title.x = element_text(size = 8),
axis.title.y = element_text(size = 8),
legend.key.size = unit(0.1, 'cm'),
legend.text = element_text(size=8),
legend.title = element_blank())
p
p <- ggplot(df, aes_string(x="Class", y="Area", color="Class")) + geom_violin() +geom_boxplot()+ theme(
axis.text.x = element_blank(),
axis.text.y = element_text(size=6),
axis.title.x = element_text(size = 8),
axis.title.y = element_text(size = 8),
legend.key.size = unit(0.1, 'cm'),
legend.text = element_text(size=8),
legend.title = element_blank())
p
p <- ggplot(df, aes_string(x="Class", y="Area", color="Class")) + geom_violin() +geom_boxplot(width=0.5)+ theme(
axis.text.x = element_blank(),
axis.text.y = element_text(size=6),
axis.title.x = element_text(size = 8),
axis.title.y = element_text(size = 8),
legend.key.size = unit(0.1, 'cm'),
legend.text = element_text(size=8),
legend.title = element_blank())
p
p <- ggplot(df, aes_string(x="Class", y="Area", color="Class")) + geom_violin() +geom_boxplot(width=0.25)+ theme(
axis.text.x = element_blank(),
axis.text.y = element_text(size=6),
axis.title.x = element_text(size = 8),
axis.title.y = element_text(size = 8),
legend.key.size = unit(0.1, 'cm'),
legend.text = element_text(size=8),
legend.title = element_blank())
p
?geom_boxplot
p <- ggplot(df, aes_string(x="Class", y="Area", color="Class")) + geom_violin() +geom_boxplot(width=0.25)+ stat_boxplot(geom = "errorbar", width = 0.2)+ theme(
axis.text.x = element_blank(),
axis.text.y = element_text(size=6),
axis.title.x = element_text(size = 8),
axis.title.y = element_text(size = 8),
legend.key.size = unit(0.1, 'cm'),
legend.text = element_text(size=8),
legend.title = element_blank())
p
?geom_violin
p <- ggplot(df, aes_string(x="Class", y="Area", color="Class")) + geom_violin(aes(fill = cyl)) +geom_boxplot(width=0.25)+ stat_boxplot(geom = "errorbar", width = 0.2)+ theme(
axis.text.x = element_blank(),
axis.text.y = element_text(size=6),
axis.title.x = element_text(size = 8),
axis.title.y = element_text(size = 8),
legend.key.size = unit(0.1, 'cm'),
legend.text = element_text(size=8),
legend.title = element_blank())
p
p <- ggplot(df, aes_string(x="Class", y="Area", color="Class")) + geom_violin(aes(fill = "#FFFFFF")) +geom_boxplot(width=0.25)+ stat_boxplot(geom = "errorbar", width = 0.2)+ theme(
axis.text.x = element_blank(),
axis.text.y = element_text(size=6),
axis.title.x = element_text(size = 8),
axis.title.y = element_text(size = 8),
legend.key.size = unit(0.1, 'cm'),
legend.text = element_text(size=8),
legend.title = element_blank())
p
p <- ggplot(df, aes_string(x="Class", y="Area", color="Class")) + geom_violin(aes(fill = cyl)) +geom_boxplot(width=0.25)+ stat_boxplot(geom = "errorbar", width = 0.2)+ theme(
axis.text.x = element_blank(),
axis.text.y = element_text(size=6),
axis.title.x = element_text(size = 8),
axis.title.y = element_text(size = 8),
legend.key.size = unit(0.1, 'cm'),
legend.text = element_text(size=8),
legend.title = element_blank())
p
p <- ggplot(df, aes_string(x="Class", y="Area", color="Class")) + geom_violin(aes(fill = cyl)) +geom_boxplot(width=0.25)+ stat_boxplot(geom = "errorbar", width = 0.2)+ theme(
axis.text.x = element_blank(),
axis.text.y = element_text(size=6),
axis.title.x = element_text(size = 8),
axis.title.y = element_text(size = 8),
legend.key.size = unit(0.1, 'cm'),
legend.text = element_text(size=8),
legend.title = element_blank())
p
p <- ggplot(df, aes_string(x="Class", y="Area", color="Class")) + geom_violin() +geom_boxplot(width=0.25)+ stat_boxplot(geom = "errorbar", width = 0.2)+ theme(
axis.text.x = element_blank(),
axis.text.y = element_text(size=6),
axis.title.x = element_text(size = 8),
axis.title.y = element_text(size = 8),
legend.key.size = unit(0.1, 'cm'),
legend.text = element_text(size=8),
legend.title = element_blank())
p
p <- ggplot(df, aes_string(x="Class", y="Area", color="Class" fill = "Class")) + geom_violin() +geom_boxplot(width=0.25)+scale_fill_manual(name= "Class", values = c("grey40"))+ stat_boxplot(geom = "errorbar", width = 0.2)+ theme(
axis.text.x = element_blank(),
axis.text.y = element_text(size=6),
axis.title.x = element_text(size = 8),
axis.title.y = element_text(size = 8),
legend.key.size = unit(0.1, 'cm'),
legend.text = element_text(size=8),
legend.title = element_blank())
p <- ggplot(df, aes_string(x="Class", y="Area", color="Class", fill = "Class")) + geom_violin() +geom_boxplot(width=0.25)+scale_fill_manual(name= "Class", values = c("grey40"))+ stat_boxplot(geom = "errorbar", width = 0.2)+ theme(
axis.text.x = element_blank(),
axis.text.y = element_text(size=6),
axis.title.x = element_text(size = 8),
axis.title.y = element_text(size = 8),
legend.key.size = unit(0.1, 'cm'),
legend.text = element_text(size=8),
legend.title = element_blank())
p
p <- ggplot(df, aes_string(x="Class", y="Area", color="Class", fill = "Class")) + geom_violin() +geom_boxplot(width=0.25)+scale_fill_manual(name= "Class", values = c("grey40"))+scale_color_manual(name = "Class", values = c("grey40"))+ stat_boxplot(geom = "errorbar", width = 0.2)+ theme(
axis.text.x = element_blank(),
axis.text.y = element_text(size=6),
axis.title.x = element_text(size = 8),
axis.title.y = element_text(size = 8),
legend.key.size = unit(0.1, 'cm'),
legend.text = element_text(size=8),
legend.title = element_blank())
p
p <- ggplot(df, aes_string(x="Class", y="Area", color="Class")) + geom_violin(aes(fill = cyl)) +geom_boxplot(width=0.25)+ stat_boxplot(geom = "errorbar", width = 0.2)+ theme(
axis.text.x = element_blank(),
axis.text.y = element_text(size=6),
axis.title.x = element_text(size = 8),
axis.title.y = element_text(size = 8),
legend.key.size = unit(0.1, 'cm'),
legend.text = element_text(size=8),
legend.title = element_blank())
p
p <- ggplot(df, aes_string(x="Class", y="Area", color="Class")) + geom_violin() +geom_boxplot(width=0.25)+ stat_boxplot(geom = "errorbar", width = 0.2)+ theme(
axis.text.x = element_blank(),
axis.text.y = element_text(size=6),
axis.title.x = element_text(size = 8),
axis.title.y = element_text(size = 8),
legend.key.size = unit(0.1, 'cm'),
legend.text = element_text(size=8),
legend.title = element_blank())
p
p <- ggplot(df, aes_string(x="Class", y="Area", color="Class")) + geom_violin() +geom_boxplot(width=0.25,color="grey40",fill="salmon", alpha=0.2)+ stat_boxplot(geom = "errorbar", width = 0.25)+ theme(
axis.text.x = element_blank(),
axis.text.y = element_text(size=6),
axis.title.x = element_text(size = 8),
axis.title.y = element_text(size = 8),
legend.key.size = unit(0.1, 'cm'),
legend.text = element_text(size=8),
legend.title = element_blank())
p
p <- ggplot(df, aes_string(x="Class", y="Area", color="Class")) + geom_violin() +geom_boxplot(width=0.25,color="grey40",fill=Class, alpha=0.2)+ stat_boxplot(geom = "errorbar", width = 0.25)+ theme(
axis.text.x = element_blank(),
axis.text.y = element_text(size=6),
axis.title.x = element_text(size = 8),
axis.title.y = element_text(size = 8),
legend.key.size = unit(0.1, 'cm'),
legend.text = element_text(size=8),
legend.title = element_blank())
p <- ggplot(df, aes_string(x="Class", y="Area", color="Class")) + geom_violin() +geom_boxplot(width=0.25,color="grey40",fill=class, alpha=0.2)+ stat_boxplot(geom = "errorbar", width = 0.25)+ theme(
axis.text.x = element_blank(),
axis.text.y = element_text(size=6),
axis.title.x = element_text(size = 8),
axis.title.y = element_text(size = 8),
legend.key.size = unit(0.1, 'cm'),
legend.text = element_text(size=8),
legend.title = element_blank())
p
p <- ggplot(df, aes_string(x="Class", y="Area", color="Class")) + geom_violin() +geom_boxplot(width=0.25,color="grey40",fill=df$Class, alpha=0.2)+ stat_boxplot(geom = "errorbar", width = 0.25)+ theme(
axis.text.x = element_blank(),
axis.text.y = element_text(size=6),
axis.title.x = element_text(size = 8),
axis.title.y = element_text(size = 8),
legend.key.size = unit(0.1, 'cm'),
legend.text = element_text(size=8),
legend.title = element_blank())
p
p <- ggplot(df, aes_string(x="Class", y="Area", color="Class")) + geom_violin(color="grey40") +geom_boxplot(width=0.25,color="grey40",fill=Class, alpha=0.2)+ stat_boxplot(geom = "errorbar", width = 0.25)+ theme(
axis.text.x = element_blank(),
axis.text.y = element_text(size=6),
axis.title.x = element_text(size = 8),
axis.title.y = element_text(size = 8),
legend.key.size = unit(0.1, 'cm'),
legend.text = element_text(size=8),
legend.title = element_blank())
p <- ggplot(df, aes_string(x="Class", y="Area", color="Class")) + geom_violin(color="grey40") +geom_boxplot(width=0.25,color="grey40",fill="salmon", alpha=0.2)+ stat_boxplot(geom = "errorbar", width = 0.25)+ theme(
axis.text.x = element_blank(),
axis.text.y = element_text(size=6),
axis.title.x = element_text(size = 8),
axis.title.y = element_text(size = 8),
legend.key.size = unit(0.1, 'cm'),
legend.text = element_text(size=8),
legend.title = element_blank())
p
install.packages("pastecs")
library(pastecs)
stat.desc(df)
stat.desc(df) %>% View()
stat.desc(df) %>% kable(., format = "markdown")
floor(4/2)
floor(5/2)
?stat.desc
?slice
?stat.desc
library(kibble)
install.packages("tidyverse")
library(kibble)
library(tibble)
stat.desc(df[,1:floor(ncol(df)/2)]) %>% slice(., 4:ncol(df)) %>% quantile(., probs = c(0, 0.25, 0.5, 0.75, 1))
stat.desc(df[,1:floor(ncol(df)/2)]) %>% slice(., 4:ncol(df))
df %>% quantile(., probs = c(0, 0.25, 0.5, 0.75, 1))
col_numeric <- which( sapply(df, is.numeric ) )
quantile( x = unlist( df[,  col_numeric] ),
c(.10, .30, .5, .75, .9),
na.rm = TRUE )
quantile( x = unlist(df[,col_numeric]), c(.25,.5,.75)) %>% View()
quantile( x = unlist(df[,col_numeric]), c(.25,.5,.75)) %>%  as.data.frame()%>% View()
sapply(col_numeric, function( y ) {
quantile( x = unlist( df[,  y ] ), c(.25,.5,.75))
})
sapply(col_numeric, function( y ) {
quantile( x = unlist( df[,  y ] ), c(.25,.5,.75))
}) %>% as.data.frame() %>% View()
library(HelpersMG)
install.packages("HelpersMG")
library(HelpersMG)
wget
wget(url = "https://www.muratkoklu.com/datasets/vtdhnd05.php")
?wget
wget(url = "https://www.muratkoklu.com/datasets/Pumpkin_Seeds_Dataset.zip")
col_numeric <- which( sapply(df, is.numeric ) )
sapply(col_numeric, function( y ) {
quantile( x = unlist( df[,  y ] ), c(.25,.5,.75))
})
sapply(col_numeric, function( y ) {
quantile( x = unlist( df[,  y ] ), c(.25,.5,.75))
}) %>% as.data.frame()
sapply(col_numeric, function( y ) {
quantile( x = unlist( df[,  y ] ), c(.25,.5,.75))
}) %>% as.data.frame() %>% View()
sapply(col_numeric, function( y ) {
quantile( x = unlist( df[,  y ] ), c(.25,.5,.75))
}) %>% as.data.frame() %>% `rownames<-`%>% View()
sapply(col_numeric, function( y ) {
quantile( x = unlist( df[,  y ] ), c(.25,.5,.75))
}) %>% as.data.frame() %>% `rownames<-c(1,2,3)`%>% View()
sapply(col_numeric, function( y ) {
quantile( x = unlist( df[,  y ] ), c(.25,.5,.75))
}) %>% as.data.frame() %>% `rownames<-`%c(1,2,3)>% View()
sapply(col_numeric, function( y ) {
quantile( x = unlist( df[,  y ] ), c(.25,.5,.75))
}) %>% as.data.frame() %>% `rownames<-`c(1,2,3) %>% View()
library(dplyr)
df
df %>% View()
setwd("~/Documents/MUM/MACE/2ndo Bloque/Entrega/source")
library(readxl)
library(dplyr)
library(knitr)
library(ggplot2)
library(ggpubr)
library(pastecs)
df <- readxl::read_excel("../Pumpkin_Seeds_Dataset/Pumpkin_Seeds_Dataset.xlsx")
df %>% group_by(colnames(df))
?group_by
col_numeric <- which( sapply(df, is.numeric ) )   # Seleccionamos solamente las columnas numéricas.
quantile_df <- sapply(col_numeric, function( y ) {
quantile( x = unlist( df[,  y ] ), c(.25,.5,.75))
}) %>% as.data.frame()
rownames(quantile_df) <- c("Q1","Q2","Q3")
quantile_df %>% View()
c(a,b) <- c(3,2)
quantile_df["Area"]
quantile_df["Area"][1]
quantile_df["Area"][[1]]
quantile_df["Area"][[1]][1]
top_IQR <- quantile_df["Area"][[1]][3]
bot_IQR <- quantile_df["Area"][[1]][1]
top_IQR
bot_IQR
?colwise
library(dplyr)
?colwise
~ is.na("NA")
~ is.na(NA)
~3*$
~3*4
`$`(df ,colnames(df)[2])
set.seed(42)
tm <- as.numeric(c("1", "2", "3", "3", "2", "1", "2", "3", "1", "1"))
d <- as.numeric(sample(0:2, size = 10, replace = TRUE))
t <- as.numeric(sample(0:2, size = 10, replace = TRUE))
h <- as.numeric(sample(0:2, size = 10, replace = TRUE))
df <- as.data.frame(cbind(tm, d, t, h))
df$p <- rowSums(df[2:4])
df %>% View()
df <- readxl::read_excel("../Pumpkin_Seeds_Dataset/Pumpkin_Seeds_Dataset.xlsx")
quantile_df %>% View()
quantile_df[[1]][3]
quantile_df['Q1']
quantile_df['Q1',]
Q1 <- quantile_df['Q1',]
Q3 <- quantile_df['Q3',]
top_IQR <- Q3+1.5(Q3-Q1)
bot_IQR <- Q1-1.5(Q3-Q1)
Q3 %>% View()
Q3['Q3']
Q3['Q3',]
Q3['Q3',][1]
Q3['Q3',][[1]]
Q3['Q3',][1,]
quantile_df[c(1,3),] %>% View()
quantile_df['Q1',] %>% as.vector() %>% as.numeric()
Q1 <- quantile_df['Q1',] %>% as.vector() %>% as.numeric()
Q3 <- quantile_df['Q3',] %>% as.vector() %>% as.numeric()
top_IQR <- Q3+1.5(Q3-Q1)
bot_IQR <- Q1-1.5(Q3-Q1)
Q1 <- quantile_df['Q1',] %>% as.vector() %>% as.numeric()
Q3 <- quantile_df['Q3',] %>% as.vector() %>% as.numeric()
top_IQR <- Q3+1.5*(Q3-Q1)
bot_IQR <- Q1-1.5*(Q3-Q1)
top_IQR
3>=3
vars <- colnames(df)
Q1 <- quantile_df['Q1',] %>% as.vector() %>% as.numeric()
Q3 <- quantile_df['Q3',] %>% as.vector() %>% as.numeric()
top_IQR <- Q3+1.5*(Q3-Q1)
bot_IQR <- Q1-1.5*(Q3-Q1)
df %>%
filter(
.data[vars>=top_IQR && vars<=bot_IQR]
) %>% View()
vars <- colnames(df)
Q1 <- quantile_df['Q1',] %>% as.vector() %>% as.numeric()
Q3 <- quantile_df['Q3',] %>% as.vector() %>% as.numeric()
top_IQR <- Q3+1.5*(Q3-Q1)
bot_IQR <- Q1-1.5*(Q3-Q1)
df %>%
filter(
.data[vars>=top_IQR && vars<=bot_IQR]
)
vars <- colnames(df)
Q1 <- quantile_df['Q1',] %>% as.vector() %>% as.numeric()
Q3 <- quantile_df['Q3',] %>% as.vector() %>% as.numeric()
top_IQR <- Q3+1.5*(Q3-Q1)
bot_IQR <- Q1-1.5*(Q3-Q1)
df %>% filter(.data[vars>=top_IQR && vars<=bot_IQR])
df %>% filter(.data[vars>=top_IQR,vars<=bot_IQR])
?filter
df %>% filter(.data[[vars]]>=top_IQR,.data[[vars]]<=bot_IQR)
df %>% filter(.data[vars]>=top_IQR,.data[vars]<=bot_IQR)
df["Area"]>=top_IQR
df["Area"]>=top_IQR %>% sum()
df["Area"]>=top_IQR %>% group_by() %>% sum()
df[df["Area"]>=top_IQR]
df["Area"]>=top_IQR
df["Area"]>=top_IQR %>% View()
df["Area"]>=top_IQR %>% as.data.frame() %>% View()
df["Area"]>=top_IQR %>% as.vector()
df["Area"]>=top_IQR %>% as.vector() %>% sum()
df["Area"]>=top_IQR %>% as.vector()
df["Area"]>=top_IQR %>% rowSums()
df["Area"]>=top_IQR %>% as.vector() %>% rowSums()
df["Area"]>=top_IQR %>% as.data.frame() %>% rowSums()
sum(1, 2, 3, 4, 5)
df["Area"]>=top_IQR %>% sum()
df["Area"]>=top_IQR
t <- df["Area"]>=top_IQR
t[1]
t[[1]]
t
t %>% View()
t[]
t <- df["Area"]>=top_IQR
sum(t[,1])
df["Area"]>=top_IQR %>% sum(.[,1])
df["Area"]>=top_IQR %>% sum(.)
df["Area"]>=top_IQR %>% sum(.["Area"])
df["Area"]>=top_IQR %>% sum(.[,"Area"])
people %>% summarise(sum(weight))
df%>% summarise(sum(Area))
df["Area"]>=top_IQR %>% summarise(sum(Area))
df["Area"]>=top_IQR
df["Area"]>=top_IQR %>% as.data.frame()
(df["Area"]>=top_IQR) %>% as.data.frame()
(df["Area"]>=top_IQR) %>% as.data.frame() %>% summarise(sum(Area))
(df["Area"]>=top_IQR) %>% summarise(sum(Area))
(df["Area"]>=top_IQR || df["Area"]<=top_IQR) %>% as.data.frame() %>% View()
(df["Area"]>=top_IQR || df["Area"]<=top_IQR) %>% as.data.frame() %>% View()
(df["Area"]>=top_IQR) %>% as.data.frame() %>% summarise(sum(Area))
(df["Area"]>=top_IQR) %>% as.data.frame() %>% summarise(sum("Area"))
df[col] %>% nrow()
df["Area"] %>% nrow()
Q1 <- quantile_df['Q1',] %>% as.vector() %>% as.numeric()
Q3 <- quantile_df['Q3',] %>% as.vector() %>% as.numeric()
top_IQR <- Q3+1.5*(Q3-Q1)
bot_IQR <- Q1-1.5*(Q3-Q1)
out <- c()
for(col in colnames(df)){
count_top_out <- (df[col]>=top_IQR) %>% as.data.frame() %>% summarise(sum(col))
count_bot_out <- (df[col]<=bot_IQR) %>% as.data.frame() %>% summarise(sum(col))
out <- c(out,(count_top_out+count_bot_out)/(df[col] %>% nrow()))
}
(df>=top_IQR) %>% as.data.frame()
(df>=top_IQR) %>% as.data.frame() %>% View()
t <- (df>=top_IQR) %>% as.data.frame()
t["Area"]%>% summarise(sum(Area))
sapply((df>=top_IQR) %>% as.data.frame(),function(i) summarise(sum(i)))
sapply((df>=top_IQR) %>% as.data.frame(),summarise(sum()))
sapply((df>=top_IQR) %>% as.data.frame(),summarise(sum(.)))
sapply((df>=top_IQR) %>% as.data.frame(),summarise(sum()))
(df>=top_IQR) %>% as.data.frame()
sapply(top_df,summarise(sum()))
sapply(top_df,summarise(sum(.)))
(df>=top_IQR) %>% as.data.frame() %>% filter(.data[[colnames(df)]]==TRUE)
(df>=top_IQR) %>% as.data.frame() %>% filter(.data[colnames(df)]==TRUE)
(df>=top_IQR) %>% as.data.frame() %>% filter(.data==TRUE)
(df>=top_IQR) %>% as.data.frame() %>% summarise(across(everything(), sum))
df %>% summarise(across(everything(), count))
df
Q1 <- quantile_df['Q1',] %>% as.vector() %>% as.numeric()
Q3 <- quantile_df['Q3',] %>% as.vector() %>% as.numeric()
top_IQR <- Q3+1.5*(Q3-Q1)
bot_IQR <- Q1-1.5*(Q3-Q1)
count_top_out <- (df>=top_IQR) %>% as.data.frame() %>% summarise(across(everything(), sum)) %>% as.vector() %>% as.numeric()
count_bot_out <- (df<=bot_IQR) %>% as.data.frame() %>% summarise(across(everything(), sum)) %>% as.vector() %>% as.numeric()
perc_out <- (count_top_out+count_bot_out)/(df[col] %>% nrow())
perc_out
